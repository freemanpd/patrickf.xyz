# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
variables:
  DBNAME: pg11
  DBHOST: 127.0.0.1
  DBUSER: postgres
  DBPASS: password123
  DBPORT: 5432
  DBSECRETKEY: '$2j=bhs+=-&sp=glzxka%thsaq%tmrjt@+my06y@q4osfnmkn)'
  DEBUGLOG: TRUE
  backend-imageName: 'patrickfxyz-django-react'
  #backend-imageName: 'patrickfxyz-django-backend'
  ui-imageName: 'patrickfxyz-react-ui'
  version: 0.0.1
# Note: not used for PRODUCTION!!!! 

resources:
  containers:
  - container: pg11
    image: postgres:11
    ports: 5432
 
trigger:
- master
# update triggers to build based on branch/?? and/or certain changes

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 1

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: '1.1.6' 

- task: Docker@2
  displayName: Build an $(backend-imageName) Docker image
  inputs:
    command: build
    repository: patrickfxyz/$(backend-imageName)
    dockerfile: Dockerfile
    containerRegistry: AzurecontainerRegistry
    tags: |
      $(version)
    arguments: --env NAME=$(DBNAME) --env HOST=$(DBHOST) --env USER=$(DBUSER) --env PASS=$(DBPASS) --env PORT=$(DBPORT) --env SECRET_KEY=$(DBSECRETKEY) --env DEBUG=$(DEBUGLOG)
    
- task: Docker@2
  displayName: Push $(backend-imageName) Docker image
  inputs:
    command: push
    repository: patrickfxyz/$(backend-imageName)
    containerRegistry: AzurecontainerRegistry
    tags: |
      $(version)

# - task: Docker@2
#   displayName: Build an $(ui-imageName) Docker image
#   inputs:
#     command: buildAndPush
#     repository: patrickfxyz/$(ui-imageName)
#     dockerfile: patrickf-ui/Dockerfile
#     containerRegistry: AzurecontainerRegistry
#     tags: |
#       $(version)